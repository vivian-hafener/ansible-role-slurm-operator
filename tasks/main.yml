---
# Tasks file for ansible-role-slurm-operator

- name: Check if Kubernetes has already been initialized.
  ansible.builtin.stat:
    path: "{{ kubernetes_conf }}"
  register: kubernetes_init_stat

- name: Ensure that Kubernetes has been initialized before proceeding
  ansible.builtin.fail:
    msg: "It does not appear that Kubernetes has been initialized - no config found at {{ kubernetes_conf }}"
  when: kubernetes_init_stat is not defined

- name: Install pip module kubernetes before proceeding
  ansible.builtin.pip:
    name: kubernetes

- name: Check whether a standard storage class exists
  kubernetes.core.k8s_info:
    api_version: "{{ api_version }}"
    kind: StorageClass
    name: standard
  register: storage_exists

- name: Check whether defined storage class exists
  kubernetes.core.k8s_info:
    api_version: "{{ api_version }}"
    kind: StorageClass
    name: "{{ storage_type }}-storage"
  register: storage_exists
  when: storage_exists is not defined

- name: Check for DefaultStorageClass
  become: true
  ansible.builtin.shell:
    cmd: "cat /etc/kubernetes/manifests/kube-apiserver.yaml | grep DefaultStorageClass"
  changed_when: true
  ignore_errors: true
  register: dsc_result

# TODO Replace this with ansible.builtin.replCe
- name: Enable DefaultStorageClass
  become: true
  ansible.builtin.command:
    cmd: "sed -i 's/--enable-admission-plugins=/--enable-admission-plugins=DefaultStorageClass,/g' /etc/kubernetes/manifests/kube-apiserver.yaml"
  changed_when: true
  when: dsc_result.stdout == ""

- name: Include StorageClass vars
  when: (storage_exists is not defined) and (storage_type == "nfs")
  ansible.builtin.include_vars: "{{ storage_type }}.yml"

- name: Apply StorageClass
  when: (storage_exists is not defined)
  ansible.builtin.include_tasks:
    file: "{{ storage_type }}.yml"
  register: storage_exists

- name: Apply Operator Helm Chart
  when: (storage_exists is defined) and (install_operator == "true")
  kubernetes.core.helm:
    name: slurm-operator
    chart_ref: "oci://ghcr.io/slinkyproject/charts/slurm-operator"
    namespace: slinky
    create_namespace: true
  register: operator_installed

# TODO - Check for operator before attempting to install slurm
# - name: Check whether defined storage class exists
#   kubernetes.core.k8s_info:
#     api_version: "{{ api_version }}"
#     kind: NodeSet
#     name: "{{ storage_type }}-storage"
#   register: storage_exists
#   when: operator_installed is not defined

- name: Apply Slurm Helm Chart
  when: (storage_exists is defined) and (install_slurm == "true")
  kubernetes.core.helm:
    name: slurm
    chart_ref: "oci://ghcr.io/slinkyproject/charts/slurm"
    namespace: slurm
    create_namespace: true

# TODO - Handle upgrades
